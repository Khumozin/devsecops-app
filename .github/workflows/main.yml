name: Build, Test

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v4
      - name: Cache npm modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci
      - run: npm run build

  unit-test:
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v4
      - name: Cache npm modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci
      - run: npm test -- --watch=false --browsers=ChromeHeadless

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        node-version: [20.x]

    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Run npm audit
        run: npm audit --audit-level=high

  gitleaks:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish:
    runs-on: ubuntu-latest
    needs: [security-scan, unit-test, gitleaks]
    strategy:
      matrix:
        node-version: [20.x]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Cache npm modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('package-lock.json') }}
          restore-keys: ${{ runner.os }}-npm-

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - run: npm ci
      - run: npm run build

      - name: Semantic release
        id: semantic_release
        uses: nick-fields/retry@v2
        with:
          timeout_minutes: 5
          max_attempts: 2
          command: npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-build:
    runs-on: ubuntu-latest
    needs: [publish]
    steps:
      - uses: actions/checkout@v4
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-
      - name: Build Docker image
        run: docker build -t khumo/devsecops:latest .

      - name: Scan Docker image for vulnerabilities with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: khumo/devsecops:latest
          format: "github"
          output: "dependency-results.sbom.json"
          severity: "CRITICAL,HIGH"
          exit-code: "1"

      - name: Tag Docker image with semantic version and latest
        run: |
          docker image ls
          docker tag khumo/devsecops:latest khumo/devsecops:latest
          docker tag khumo/devsecops:latest khumo/devsecops:${{ steps.semantic_release.outputs.new_release_version }}

      - name: Log in to Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Push latest Docker image to Docker Hub
        run: docker push khumo/devsecops:latest

      - name: Push ${{ steps.semantic_release.outputs.new_release_version }} Docker image to Docker Hub
        run: docker push khumo/devsecops:${{ steps.semantic_release.outputs.new_release_version }}
#   docker-tag-and-push:
#     runs-on: ubuntu-latest
#     needs: [docker-build]
#     # if: steps.semantic_release.outputs.new_release_version != ''
#     steps:
#       - uses: actions/checkout@v4
#       - name: Log in to Docker Hub
#         run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
#       - name: Tag Docker image with semantic version and latest
#         run: |
#           docker image ls
#           docker tag devsecops khumo/devsecops:latest
#         # docker tag devsecops khumo/devsecops:${{ steps.semantic_release.outputs.new_release_version }}
#       #   - name: Push Docker image to Docker Hub
#       #     run: docker push khumo/devsecops:${{ steps.semantic_release.outputs.new_release_version }}
#       - name: Push latest Docker image to Docker Hub
#         run: docker push khumo/devsecops:latest

#       # Trivy Docker Image Security Scan
#       - name: Scan Docker image for vulnerabilities with Trivy
#         uses: aquasecurity/trivy-action@master
#         with:
#           image-ref: khumo/devsecops:latest
#         #   image-ref: khumo/devsecops:${{ steps.semantic_release.outputs.new_release_version }}
